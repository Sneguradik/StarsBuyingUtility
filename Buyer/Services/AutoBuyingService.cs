using System.Collections.Concurrent;
using Buyer.Configuration;
using Buyer.Models;
using Microsoft.Extensions.Options;

namespace Buyer.Services;

public interface IAutoBuyingService
{
    Task RunAsync(CancellationToken cancellationToken = default);
}
public class AutoBuyingService(ILogger<AutoBuyingService> logger, ITelegramGiftBuyer telegramGiftBuyer, IOptions<BuyerConfig> config): IAutoBuyingService
{
    private HashSet<long> _knownGifts = new();
    
    public async Task RunAsync(CancellationToken cancellationToken = default)
    {
        logger.LogInformation("üöÄ AutoBuyingService –∑–∞–ø—É—â–µ–Ω");

        while (!cancellationToken.IsCancellationRequested)
        {
            try
            {
                logger.LogInformation($"{DateTime.Now:yyyy-MM-dd hh-mm-ss} Started checking");
                var giftList = (await telegramGiftBuyer.GetAvailableGiftsAsync(cancellationToken)).ToArray();

                
                var giftsToBuy = giftList
                    //.Where(x => !x.Limited || x.CurrentSupply>0)
                    .Where(x => x is {  CurrentSupply: > 0 ,Limited: true })
                    .ToArray();

                if (giftsToBuy.Length == 0)
                {
                    await Task.Delay(100, cancellationToken);
                    continue;
                }
                
                
                var invoices = config.Value.GiftInvoices;

                logger.LogInformation("üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {Count} –∏–Ω–≤–æ–π—Å–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", invoices.Count);
                
                var tasks = new List<Task>();
                foreach (var invoice in invoices)
                {
                    tasks.Add(Task.Run(() => ProcessInvoiceAsync(invoice, giftsToBuy, cancellationToken), cancellationToken));
                }

                await Task.WhenAll(tasks);
                    

                _knownGifts = giftList.Select(x => x.Id).ToHashSet();
            }
            catch (OperationCanceledException)
            {
                logger.LogInformation("‚èπ AutoBuyingService –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ CancellationToken");
                break;
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "‚ùå –û—à–∏–±–∫–∞ –≤ AutoBuyingService");
                await Task.Delay(1000, cancellationToken);
            }
        }
        
        
        logger.LogInformation("‚úÖ AutoBuyingService –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É");
    }
    
    private async Task ProcessInvoiceAsync(GiftInvoice invoice, Gift[] gifts, CancellationToken cancellationToken = default)
    {
        var suitableGiftsQuery = gifts
            .Where(x => invoice.MinPrice <= x.Price && x.Price <= invoice.MaxPrice);
        
        if (invoice.MaxSupply is not null) suitableGiftsQuery = suitableGiftsQuery
            .Where(x=>x.TotalSupply <= invoice.MaxSupply);
            
        
        var suitableGifts = suitableGiftsQuery.OrderByDescending(x => x.Price).ToArray();

        if (!suitableGifts.Any())
        {
            logger.LogDebug("–ò–Ω–≤–æ–π—Å #{InvoiceId}: –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥–∞—Ä–∫–æ–≤", invoice.Id);
            return;
        }

        logger.LogInformation("üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–Ω–≤–æ–π—Å #{InvoiceId}, –æ—Å—Ç–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å {Amount} —à—Ç.",
            invoice.Id, invoice.Amount);

        var buyGifts = suitableGifts.Take(invoice.Amount).ToList();

        if (buyGifts.Count < invoice.Amount)
        {
            var index = 0;
            while (buyGifts.Count < invoice.Amount && suitableGifts.Length > 0)
            {
                buyGifts.Add(suitableGifts[index % suitableGifts.Length]);
                index++;
            }
        }
        
        var buyTasks = buyGifts
            .Select(gift => telegramGiftBuyer.BuyGiftAsync(gift, invoice.RecipientId, invoice.RecipientType, cancellationToken))
            .ToArray();

        var results = await Task.WhenAll(buyTasks);
        var successful = results.Where(x => x is not null).Cast<GiftTransaction>().ToList();

        invoice.Amount -= successful.Count;

        logger.LogInformation("üéÅ –ö—É–ø–ª–µ–Ω–æ {Count} –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –∏–Ω–≤–æ–π—Å–∞ #{InvoiceId}",
            successful.Count, invoice.Id);

        if (invoice.Amount <= 0)
        {
            config.Value.GiftInvoices.Remove(invoice);
            logger.LogInformation("‚úÖ –ò–Ω–≤–æ–π—Å #{InvoiceId} –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª–Ω–µ–Ω", invoice.Id);
        }
        
    }
}